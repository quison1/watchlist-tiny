
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> func_load_packages <- function(pkg){
+   # function to install and require packages
+   # https://gist.github.com/stevenworthington/3178163
+   new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
+   if (length(new.pkg)) 
+     install.packages(new.pkg, dependencies = TRUE)
+   sapply(pkg, require, character.only = TRUE)
+ }
> 
> libs <- c("tidyverse", "tidyquant")
> func_load_packages(libs) # load packages
Loading required package: tidyverse
-- Attaching packages --------------------------------------- tidyverse 1.3.0 --
v ggplot2 3.3.3     v purrr   0.3.4
v tibble  3.0.6     v dplyr   1.0.4
v tidyr   1.1.2     v stringr 1.4.0
v readr   1.4.0     v forcats 0.5.1
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
Loading required package: tidyquant
Loading required package: lubridate

Attaching package: 'lubridate'

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

Loading required package: PerformanceAnalytics
Loading required package: xts
Loading required package: zoo

Attaching package: 'zoo'

The following objects are masked from 'package:base':

    as.Date, as.Date.numeric


Attaching package: 'xts'

The following objects are masked from 'package:dplyr':

    first, last


Attaching package: 'PerformanceAnalytics'

The following object is masked from 'package:graphics':

    legend

Loading required package: quantmod
Loading required package: TTR
Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo 
== Need to Learn tidyquant? ====================================================
Business Science offers a 1-hour course - Learning Lab #9: Performance Analysis & Portfolio Optimization with tidyquant!
</> Learn more at: https://university.business-science.io/p/learning-labs-pro </>
tidyverse tidyquant 
     TRUE      TRUE 
> 
> # datetime specification ----
> today <- Sys.Date()
> past_horizon_long <- Sys.Date() %m+% months(-36) #lubridate required
> past_horizon_medium <- Sys.Date() %m+% months(-18) #lubridate required
> past_horizon_short <- Sys.Date() %m+% months(-3) #lubridate required
> 
> # obtain ticket list, my-list ----
> 
> print(getwd())
[1] "c:/cloud/git-project/watchlist-tiny"
> 
> filtered_list <- read.csv("rprog/simon-all.csv", header = F)[, 1] %>% as.character()
> 
> # download data from yahoo finance ----
> 
> yf_data <- filtered_list %>% 
+   tq_get(get  = "stock.prices",
+          from = past_horizon_long,
+          to   = today) %>%
+   drop_na()
> 
> temp2 <- bind_rows(yf_data)
> 
> glimpse(temp2)
Rows: 43,755
Columns: 8
$ symbol   <chr> "CBA.AX", "CBA.AX", "CBA.AX", "CBA.AX", "CBA.AX", "CBA.AX"...
$ date     <date> 2018-03-14, 2018-03-15, 2018-03-16, 2018-03-19, 2018-03-2...
$ open     <dbl> 76.50, 77.00, 75.97, 75.66, 74.88, 75.41, 75.43, 74.10, 72...
$ high     <dbl> 76.64, 77.00, 76.25, 75.98, 75.58, 75.83, 75.44, 74.16, 72...
$ low      <dbl> 76.160, 75.650, 75.025, 74.890, 74.610, 75.150, 74.660, 72...
$ close    <dbl> 76.55, 75.78, 75.34, 74.89, 75.19, 75.78, 74.87, 72.81, 72...
$ volume   <dbl> 3068664, 4006228, 3791783, 2364077, 2354537, 1926293, 2530...
$ adjusted <dbl> 66.41504, 65.74699, 65.36523, 64.97482, 65.23509, 65.74699...
> 
> FANG_macd <- temp2 %>% # yf_data %>% drop_na() %>%
+   group_by(symbol) %>%
+   tq_mutate(select     = close, 
+             mutate_fun = MACD, 
+             nFast      = 12, 
+             nSlow      = 26, 
+             nSig       = 9, 
+             maType     = SMA,
+             percent    = F) %>%
+   mutate(diff = macd - signal,
+          signDiff = diff / abs(diff),
+          signChange=c(NA, diff(signDiff)),
+          # if signChange = -2 means sell, +2 means buy
+          macd_buy = ifelse(signChange == 2 & macd < 0, 1, 0),
+          macd_sell = ifelse(signChange == -2 & macd > 0, 1, 0)
+   )
> 
> FANG_rsi <- temp2 %>% # yf_data %>% drop_na() %>%
+   group_by(symbol) %>%
+   tq_mutate(select     = close, 
+             mutate_fun = RSI) %>%
+   mutate(rsi_sell = ifelse(rsi > 70, 1, 0), # overbought signals sell
+          rsi_buy = ifelse(rsi < 30, 1, 0) # oversold signals buy
+   )
> 
> FANG <- left_join(FANG_macd, FANG_rsi)
Joining, by = c("symbol", "date", "open", "high", "low", "close", "volume", "adjusted")
> 
> plot_price <- function(chosen_ticker, starting_data) {
+   FANG %>%
+     filter(date >= as_date(starting_data)) %>%
+     filter(symbol %in% chosen_ticker) %>%
+     mutate(tradeSignal = macd_buy + macd_sell + rsi_buy + rsi_sell) %>%
+     ggplot(aes(x = date)) +
+     geom_line(aes(y = close)) +
+     # overlay with signals
+     geom_vline(data = . %>% filter(macd_buy == 1), aes(xintercept = date),
+                col = "maroon", alpha = 0.25, lty = 2, lwd = 1) +
+     geom_vline(data = . %>% filter(macd_sell == 1), aes(xintercept = date),
+                col = "darkgreen", alpha = 0.25, lty = 2, lwd = 1) +
+     geom_vline(data = . %>% filter(rsi_buy == 1), aes(xintercept = date),
+                col = "maroon", alpha = 0.25, lty = 1) +
+     geom_vline(data = . %>% filter(rsi_sell == 1), aes(xintercept = date),
+                col = "darkgreen", alpha = 0.25, lty = 1) +
+     labs(y = "", x = "", color = "", title = chosen_ticker) +
+     theme_tq() +
+     theme(panel.grid.major.x = element_blank(), panel.grid.minor = element_blank())
+ }
> 
> plot_macd <- function(chosen_ticker, starting_data) {
+   FANG %>%
+     filter(date >= as_date(starting_data)) %>%
+     filter(symbol %in% chosen_ticker) %>%
+     ggplot(aes(x = date)) + 
+     geom_hline(yintercept = 0, color = palette_light()[[1]]) +
+     geom_line(aes(y = macd), color = "orange") +
+     geom_line(aes(y = signal), color = "blue") +
+     # scale_x_date(date_labels = "%d", date_breaks = "1 week") +
+     geom_vline(data = . %>% filter(macd_buy == 1), aes(xintercept = date),
+                col = "maroon", alpha = 0.25, lty = 2, lwd = 1) +
+     geom_vline(data = . %>% filter(macd_sell == 1), aes(xintercept = date),
+                col = "darkgreen", alpha = 0.25, lty = 2, lwd = 1) +
+     labs(y = "", x = "", color = "", title = chosen_ticker) +
+     theme_tq() +
+     theme(panel.grid.major.x = element_blank(), panel.grid.minor = element_blank())
+ }
> 
> plot_rsi <- function(chosen_ticker, starting_date) {
+   FANG %>%
+     filter(date >= as_date(starting_date)) %>%
+     filter(symbol %in% chosen_ticker) %>%
+     ggplot(aes(x = date)) + 
+     geom_line(aes(y = rsi), col="purple") +
+     # scale_x_date(date_labels = "%d", date_breaks = "1 week") +
+     geom_hline(yintercept = c(30, 70), color = "black") +
+     geom_vline(data = . %>% filter(rsi_buy == 1), aes(xintercept = date),
+                col = "maroon", alpha = 0.25, lty = 1) +
+     geom_vline(data = . %>% filter(rsi_sell == 1), aes(xintercept = date),
+                col = "darkgreen", alpha = 0.25, lty = 1) +
+     labs(y = "", x = "", color = "", title = chosen_ticker) +
+     coord_cartesian(ylim = c(10, 90)) +
+     theme_tq() +
+     theme(panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank(),
+           panel.grid.major.x = element_blank(), panel.grid.minor = element_blank())
+ }
> 
> export_pictures <- function(ticker, location = "") {
+   ggsave(paste0(location, ticker, "-medium-price.png"), plot = plot_price(ticker, past_horizon_medium) + scale_x_date(date_breaks = "2 months", date_labels = "%b-%Y"), width=16, height=8, units="cm", dpi = 120)
+   ggsave(paste0(location, ticker, "-medium-macd.png"), plot = plot_macd(ticker, past_horizon_medium) + scale_x_date(date_breaks = "2 months", date_labels = "%b-%Y"), width=16, height=8, units="cm", dpi = 120)
+   ggsave(paste0(location, ticker, "-medium-rsi.png"), plot = plot_rsi(ticker, past_horizon_medium) + scale_x_date(date_breaks = "2 months", date_labels = "%b-%Y"), width=16, height=8, units="cm", dpi = 120)
+   ggsave(paste0(location, ticker, "-short-price.png"), plot = plot_price(ticker, past_horizon_short) + scale_x_date(date_breaks = "2 weeks", date_labels = "%d-%b"), width=16, height=8, units="cm", dpi = 120)
+   ggsave(paste0(location, ticker, "-short-macd.png"), plot = plot_macd(ticker, past_horizon_short) + scale_x_date(date_breaks = "2 weeks", date_labels = "%d-%b"), width=16, height=8, units="cm", dpi = 120)
+   ggsave(paste0(location, ticker, "-short-rsi.png"), plot = plot_rsi(ticker, past_horizon_short) + scale_x_date(date_breaks = "2 weeks", date_labels = "%d-%b"), width=16, height=8, units="cm", dpi = 120)
+ }
> 
> library(readr)
> 
> location_asset <- "_assets/"
> files_asset <- list.files(location_asset)
> sapply(paste0(location_asset, files_asset), file.remove)
 _assets/CBA.AX-medium-macd.png _assets/CBA.AX-medium-price.png 
                           TRUE                            TRUE 
  _assets/CBA.AX-medium-rsi.png   _assets/CBA.AX-short-macd.png 
                           TRUE                            TRUE 
 _assets/CBA.AX-short-price.png    _assets/CBA.AX-short-rsi.png 
                           TRUE                            TRUE 
> 
> location_project <- "_projects/"
> files_project <- list.files(location_project)
> sapply(paste0(location_project, files_project), file.remove)
_projects/ 
     FALSE 
Warning message:
In FUN(X[[i]], ...) :
  cannot remove file '_projects/', reason 'Permission denied'
> 
> for (ticker in filtered_list) {
+   export_pictures(ticker, location_asset)
+   
+   temp <- read_file("rprog/template.md")
+   temp <- str_replace_all(temp, "ticker", ticker)
+   readr::write_lines(temp, path = paste0(location_project, ticker, ".md"))
+ }
Warning messages:
1: The `path` argument of `write_lines()` is deprecated as of readr 1.4.0.
Please use the `file` argument instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
2: Removed 25 row(s) containing missing values (geom_path). 
3: Removed 33 row(s) containing missing values (geom_path). 
4: Removed 14 row(s) containing missing values (geom_path). 
> 
> 
> proc.time()
   user  system elapsed 
  49.45    8.48   83.85 
